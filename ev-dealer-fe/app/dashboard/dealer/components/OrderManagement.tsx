"use client";

import { useEffect, useState } from "react";
import { toast } from "sonner";
import { Loader2, Eye, CreditCard, PlusCircle } from "lucide-react";
import api from "@/lib/api";
import OrderForm from "./OrderForm";
import MomoPaymentModal from "./MomoPaymentModal";

interface Order {
    id: string;
    customer?: { full_name: string; email: string };
    variant?: { name: string };
    total_amount: number;
    order_date: string;
    status: "pending" | "confirmed" | "shipped" | "delivered" | "cancelled";
}

export default function OrderManagement() {
    const [orders, setOrders] = useState<Order[]>([]);
    const [loading, setLoading] = useState(true);
    const [showModal, setShowModal] = useState(false);
    const [qrUrl, setQrUrl] = useState<string | null>(null);
    const [currentOrderId, setCurrentOrderId] = useState<string | null>(null);

    // üîπ Load danh s√°ch ƒë∆°n h√†ng
    const loadOrders = async () => {
        try {
            const res = await api.get("/orders");
            setOrders(res.data);
        } catch (err: any) {
            console.error(err);
            toast.error("Kh√¥ng th·ªÉ t·∫£i danh s√°ch ƒë∆°n h√†ng");
        } finally {
            setLoading(false);
        }
    };

    useEffect(() => {
        loadOrders();
    }, []);

    // üîπ Thanh to√°n MoMo
    const handlePayMomo = async (orderId: string) => {
        try {
            const res = await api.post("/payments/momo", {
                order_id: orderId,
                method: "momo", // üÜï th√™m d√≤ng n√†y

            });
            const { qrCodeUrl, paymentUrl } = res.data;

            setCurrentOrderId(orderId);

            if (qrCodeUrl) {
                setQrUrl(qrCodeUrl); // ‚úÖ Hi·ªán m√£ QR n·∫øu c√≥
            } else if (paymentUrl) {
                window.open(paymentUrl, "_blank");
            } else {
                toast.warning("Kh√¥ng c√≥ m√£ QR ho·∫∑c URL thanh to√°n.");
            }
        } catch (err: any) {
            console.error(err);
            toast.error("Kh√¥ng th·ªÉ t·∫°o thanh to√°n MoMo");
        }
    };

    // üîπ X√°c nh·∫≠n thanh to√°n (sau khi user nh·∫•n ‚Äúƒê√£ thanh to√°n‚Äù)
    const handleConfirmPayment = async () => {
        try {
            toast.info("ƒêang ki·ªÉm tra tr·∫°ng th√°i ƒë∆°n h√†ng...");
            await new Promise((r) => setTimeout(r, 2000)); // gi·∫£ delay ki·ªÉm tra IPN
            await loadOrders();
            toast.success("‚úÖ ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c x√°c nh·∫≠n thanh to√°n!");
            setQrUrl(null);
            setCurrentOrderId(null);
        } catch (err) {
            toast.error("Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng");
        }
    };

    return (
        <section className="p-6">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-xl font-semibold">üí≥ Qu·∫£n l√Ω ƒë∆°n h√†ng</h2>
                <button
                    className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg flex items-center gap-2"
                    onClick={() => setShowModal(true)}
                >
                    <PlusCircle size={18} />
                    T·∫°o ƒë∆°n h√†ng m·ªõi
                </button>

                {showModal && (
                    <OrderForm
                        onClose={() => setShowModal(false)}
                        onSuccess={() => loadOrders()}
                    />
                )}
            </div>

            {loading ? (
                <div className="flex items-center gap-2">
                    <Loader2 className="animate-spin" /> ƒêang t·∫£i danh s√°ch...
                </div>
            ) : orders.length === 0 ? (
                <p>Ch∆∞a c√≥ ƒë∆°n h√†ng n√†o.</p>
            ) : (
                <div className="overflow-x-auto bg-white rounded-lg shadow">
                    <table className="w-full border-collapse text-sm">
                        <thead className="bg-gray-100">
                            <tr>
                                <th className="p-3 text-left">Kh√°ch h√†ng</th>
                                <th className="p-3 text-left">Xe</th>
                                <th className="p-3 text-left">Ng√†y ƒë·∫∑t</th>
                                <th className="p-3 text-right">T·ªïng ti·ªÅn</th>
                                <th className="p-3 text-left">Tr·∫°ng th√°i</th>
                                <th className="p-3 text-right">H√†nh ƒë·ªông</th>
                            </tr>
                        </thead>
                        <tbody>
                            {orders.map((o) => (
                                <tr key={o.id} className="border-t hover:bg-gray-50">
                                    <td className="p-3">{o.customer?.full_name || "‚Äî"}</td>
                                    <td className="p-3">{o.variant?.name || "‚Äî"}</td>
                                    <td className="p-3">
                                        {new Date(o.order_date).toLocaleDateString("vi-VN")}
                                    </td>
                                    <td className="p-3 text-right">
                                        {o.total_amount.toLocaleString("vi-VN")} ‚Ç´
                                    </td>
                                    <td className="p-3">
                                        <span
                                            className={`px-2 py-1 text-xs font-medium rounded-full ${o.status === "delivered"
                                                    ? "bg-green-100 text-green-700"
                                                    : o.status === "confirmed"
                                                        ? "bg-emerald-100 text-emerald-700"
                                                        : o.status === "pending"
                                                            ? "bg-yellow-100 text-yellow-700"
                                                            : o.status === "cancelled"
                                                                ? "bg-red-100 text-red-700"
                                                                : "bg-gray-100 text-gray-600"
                                                }`}
                                        >
                                            {o.status}
                                        </span>
                                    </td>
                                    <td className="p-3 text-right space-x-3">
                                        <button
                                            className="text-blue-600 hover:text-blue-800"
                                            onClick={() => toast.info("Ch·ª©c nƒÉng xem chi ti·∫øt...")}
                                        >
                                            <Eye size={18} />
                                        </button>

                                        {o.status === "pending" && (
                                            <button
                                                className="text-pink-600 hover:text-pink-800"
                                                onClick={() => handlePayMomo(o.id)}
                                            >
                                                <CreditCard size={18} />
                                            </button>
                                        )}
                                    </td>
                                </tr>
                            ))}
                        </tbody>
                    </table>
                </div>
            )}

            {/* üÜï Modal QR MoMo */}
            {qrUrl && (
                <MomoPaymentModal
                    qrUrl={qrUrl}
                    onClose={() => {
                        setQrUrl(null);
                        setCurrentOrderId(null);
                    }}
                    onConfirm={handleConfirmPayment}
                />
            )}
        </section>
    );
}
